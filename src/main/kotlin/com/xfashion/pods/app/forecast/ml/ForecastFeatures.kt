package com.xfashion.pods.app.forecast.ml


import com.xfashion.pods.app.sheet.dto.SheetRowModel
import java.time.DayOfWeek

/**
 * This code is generated by chatGPT :)
 */

data class ForecastFeatureMatrix(
    val X: Array<DoubleArray>,
    val y: DoubleArray,
    val featureNames: List<String>
)

object ForecastFeatures {
    // Build [1, gmv, users, marketing, dow_1..dow_6] (Sunday as baseline)
    fun design(rows: List<SheetRowModel>, targetFe: Boolean): ForecastFeatureMatrix {
        val featureNames = mutableListOf(
            "intercept", "gmv", "users", "marketing_cost",
            "dow_mon", "dow_tue", "dow_wed", "dow_thu", "dow_fri", "dow_sat"
        )
        val x = Array(rows.size) { DoubleArray(featureNames.size) }
        val y = DoubleArray(rows.size)

        rows.forEachIndexed { index, row ->
            val dow = row.date.dayOfWeek
            val arr = DoubleArray(featureNames.size)
            arr[0] = 1.0
            arr[1] = row.gmv
            arr[2] = row.users
            arr[3] = row.marketingCost
            // DOW dummies: baseline SUNDAY
            if (dow != DayOfWeek.SUNDAY) {
                val idx = when (dow) {
                    DayOfWeek.MONDAY -> 4
                    DayOfWeek.TUESDAY -> 5
                    DayOfWeek.WEDNESDAY -> 6
                    DayOfWeek.THURSDAY -> 7
                    DayOfWeek.FRIDAY -> 8
                    DayOfWeek.SATURDAY -> 9
                    else -> -1
                }
                if (idx >= 0) arr[idx] = 1.0
            }
            x[index] = arr
            y[index] = if (targetFe) row.fePods!! else row.bePods!!
        }
        return ForecastFeatureMatrix(x, y, featureNames)
    }

    // Same features but without y
    fun designX(row: SheetRowModel): DoubleArray {
        val arr = DoubleArray(10)
        arr[0] = 1.0
        arr[1] = row.gmv
        arr[2] = row.users
        arr[3] = row.marketingCost
        val dow = row.date.dayOfWeek
        when (dow) {
            DayOfWeek.MONDAY -> arr[4] = 1.0
            DayOfWeek.TUESDAY -> arr[5] = 1.0
            DayOfWeek.WEDNESDAY -> arr[6] = 1.0
            DayOfWeek.THURSDAY -> arr[7] = 1.0
            DayOfWeek.FRIDAY -> arr[8] = 1.0
            DayOfWeek.SATURDAY -> arr[9] = 1.0
            else -> {}
        }

        return arr
    }
}